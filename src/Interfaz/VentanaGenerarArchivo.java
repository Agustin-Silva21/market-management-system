// Gabriel Machado 318697, Agustin Silva 310087
package Interfaz;

import Dominio.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class VentanaGenerarArchivo extends javax.swing.JFrame implements PropertyChangeListener{

    
    public VentanaGenerarArchivo(Mercado modelo) {
        mercado = modelo;
        mercado.addPropertyChangeListener(this);
        initComponents();
        tipoM = "Ambos";
        grupoTipo.add(radioCompras);
        grupoTipo.add(radioVentas);
        grupoTipo.add(radioAmbos);
        radioAmbos.setSelected(true);
        
        
        radioCompras.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tipoM = "Compra";
            }
        });

        radioVentas.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tipoM = "Venta";
            }
        });

        radioAmbos.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tipoM = "Ambos";
            }
        });
        
    }
    
    @Override
    public void propertyChange(PropertyChangeEvent evt){
        if (evt.getPropertyName().equals("listaPuestos") || 
                evt.getPropertyName().equals("listaMovimientos")){
            int[] desdeYHasta;
            desdeYHasta = tratamientoDatos();
        
            lstPuestos.setListData(cargarPuestos(desdeYHasta[0], desdeYHasta[1], tipoM));
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoTipo = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblDesde = new javax.swing.JLabel();
        txtDesde = new javax.swing.JTextField();
        lblTipo = new javax.swing.JLabel();
        radioCompras = new javax.swing.JRadioButton();
        radioAmbos = new javax.swing.JRadioButton();
        radioVentas = new javax.swing.JRadioButton();
        lblHasta = new javax.swing.JLabel();
        txtHasta = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstPuestos = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        btnGenerarArchivo = new javax.swing.JButton();
        btnCargarPuestos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblDesde.setText("Desde:");

        lblTipo.setText("Tipo de Movimiento");

        grupoTipo.add(radioCompras);
        radioCompras.setText("Compras");

        grupoTipo.add(radioAmbos);
        radioAmbos.setText("Ambos");

        grupoTipo.add(radioVentas);
        radioVentas.setText("Ventas");

        lblHasta.setText("Hasta:");

        jLabel4.setText("Ranfo de Movimientos");

        jScrollPane1.setViewportView(lstPuestos);

        jLabel1.setText("Lista de Puestos");

        btnGenerarArchivo.setText("Generar Archivo");
        btnGenerarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarArchivoActionPerformed(evt);
            }
        });

        btnCargarPuestos.setText("Cargar Puestos");
        btnCargarPuestos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarPuestosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(lblDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(28, 28, 28)
                                    .addComponent(txtDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(lblHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(28, 28, 28)
                                    .addComponent(txtHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnCargarPuestos))
                        .addGap(45, 45, 45)
                        .addComponent(btnGenerarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioVentas)
                            .addComponent(radioCompras)
                            .addComponent(radioAmbos)
                            .addComponent(lblTipo))
                        .addGap(101, 101, 101)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipo)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(radioCompras)
                        .addGap(18, 18, 18)
                        .addComponent(radioVentas)
                        .addGap(18, 18, 18)
                        .addComponent(radioAmbos))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(btnGenerarArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(158, 158, 158))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDesde)
                            .addComponent(lblDesde, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtHasta)
                            .addComponent(lblHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnCargarPuestos)
                        .addGap(155, 155, 155))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarPuestosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarPuestosActionPerformed
        int[] desdeYHasta;
        desdeYHasta = tratamientoDatos();
        
        lstPuestos.setListData(cargarPuestos(desdeYHasta[0], desdeYHasta[1], tipoM));
    }//GEN-LAST:event_btnCargarPuestosActionPerformed

    private void btnGenerarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarArchivoActionPerformed
        
        ArrayList<Puesto> puestosSeleccionados = new ArrayList<>();
        int[] desdeYHasta;
        int[] indices = lstPuestos.getSelectedIndices();
        
        desdeYHasta = tratamientoDatos();
        
        for (int indice: indices){
            Puesto puesto = (Puesto) lstPuestos.getModel().getElementAt(indice);
            puestosSeleccionados.add(puesto);
        }
        
        puestosABuscar = puestosSeleccionados;
        
        generarArchivo(desdeYHasta[0], desdeYHasta[1], tipoM, puestosABuscar);
    }//GEN-LAST:event_btnGenerarArchivoActionPerformed
    
    private int[] tratamientoDatos(){
        int[] aDevolver = new int[2];
        aDevolver[0] = 0;
        aDevolver[1] = mercado.getListaMovimientos().size() - 1;
        try{
            aDevolver[0] = Integer.parseInt(txtDesde.getText());
            aDevolver[1] = Integer.parseInt(txtHasta.getText());
        } catch (Exception e){
            JOptionPane.showMessageDialog(this, 
                    "Rangos inválidos!\nSe buscará en todo el rango.");
            aDevolver[0] = 0;
            aDevolver[1] = mercado.getListaMovimientos().size() - 1;
        }
        return aDevolver;
    }
    
    public Puesto[] cargarPuestos(int desde, int hasta, String tipo) {
        ArrayList<Puesto> puestosADevolver = new ArrayList<>();
        try{
            Movimiento[] movimientos = mercado.getListaMovimientos().toArray(new Movimiento[0]);
            String tipoMov = "";
            for (Movimiento mov: movimientos){
                if(mov instanceof Compra){
                    tipoMov = "Compra";
                } else if (mov instanceof Movimiento){
                    tipoMov = "Venta";
                }

                if (!puestosADevolver.contains((Puesto)mov.getPuesto()) && mov.getId()
                        >= desde && mov.getId() <= hasta && (tipo.equals(
                                tipoMov) || tipo.equals("Ambos"))){
                    puestosADevolver.add(mov.getPuesto());
                }
            }
        } catch (Exception e){
            JOptionPane.showMessageDialog(this, "Por favor señale el tipo de movimiento, así como el rango de movimientos que desea encontrar", "Faltan Datos", JOptionPane.ERROR_MESSAGE);
        }
        
        return puestosADevolver.toArray(new Puesto[0]);
    }
    
    public void generarArchivo(int desde, int hasta, String tipoM, ArrayList<Puesto> puestos){
        ArchivoGrabacion arch;
        if(mercado.seEjecutaDesdeJar()){
            arch = new ArchivoGrabacion("Archivos/archivo.txt");
        } else{
            arch = new ArchivoGrabacion("src/Archivos/archivo.txt");
        }
        
        arch.grabarLinea(obtenerFechaYHora());
        Movimiento[] movimientos = mercado.getListaMovimientos().toArray(new Movimiento[0]);
        String tipoMov = "";
        for (Movimiento mov: movimientos){
            String tipoParaRegistro = "";
            if(mov instanceof Compra){
                tipoMov = "Compra";
                tipoParaRegistro = "C";
            } else if (mov instanceof Movimiento){
                tipoMov = "Venta";
                tipoParaRegistro = "V";
            }

            if (mov.getId() >= desde && mov.getId() <= hasta && 
                    (tipoM.equals(tipoMov) || tipoM.equals("Ambos")) 
                    && puestos.contains(mov.getPuesto())){
                String linea = mov.getId() + "#" + mov.getProducto().getNombre() 
                        + "#" + mov.getPuesto().getId() + "#" + tipoParaRegistro 
                        + "#" + mov.getCantidad() + "#" + mov.getPrecio();
                arch.grabarLinea(linea);
            }
        }
        arch.cerrar();
        JOptionPane.showMessageDialog(this, 
                "Archivo generado correctamente");
    }
    
    private String obtenerFechaYHora(){
        LocalDateTime fechaHoraActual = LocalDateTime.now();

        // Definir el formato deseado para el String
        DateTimeFormatter formato = DateTimeFormatter.ofPattern(
                "dd/MM/yyyy HH:mm:ss");

        // Formatear la fecha y hora actual utilizando el formato definido
        return "Fecha y hora actual: " + fechaHoraActual.format(formato);
    }
    
    @Override
    public void dispose() {
        mercado.removePropertyChangeListener(this);
        super.dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarPuestos;
    private javax.swing.JButton btnGenerarArchivo;
    private javax.swing.ButtonGroup grupoTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDesde;
    private javax.swing.JLabel lblHasta;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JList lstPuestos;
    private javax.swing.JRadioButton radioAmbos;
    private javax.swing.JRadioButton radioCompras;
    private javax.swing.JRadioButton radioVentas;
    private javax.swing.JTextField txtDesde;
    private javax.swing.JTextField txtHasta;
    // End of variables declaration//GEN-END:variables
    private Mercado mercado;
    private String tipoM;
    private ArrayList<Puesto> puestosABuscar;

}
